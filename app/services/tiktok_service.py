import asyncio
import random
from datetime import datetime, timedelta
from typing import List, Dict, Any
import httpx
from ..models import Comment, TikTokVideoInfo

class TikTokService:
    """Service for extracting comments from TikTok videos"""
    
    def __init__(self):
        self.base_url = "https://api.tiktok.com"  # Mock URL
        self.session = httpx.AsyncClient()
    
    async def extract_comments(self, url: str) -> List[Dict[str, Any]]:
        """
        Extract comments from TikTok video URL
        In production, this would use the unofficial TikTok API
        For now, we'll simulate realistic API response
        """
        try:
            # Simulate API delay
            await asyncio.sleep(random.uniform(1, 3))
            
            # Extract video ID from URL
            video_id = self._extract_video_id(url)
            
            # Generate realistic mock comments
            mock_comments = self._generate_realistic_comments(video_id)
            
            return mock_comments
            
        except Exception as e:
            raise Exception(f"Failed to extract comments from TikTok: {str(e)}")
    
    async def get_video_info(self, url: str) -> TikTokVideoInfo:
        """Get video metadata"""
        try:
            await asyncio.sleep(random.uniform(0.5, 1.5))
            
            video_id = self._extract_video_id(url)
            
            return TikTokVideoInfo(
                video_id=video_id,
                author=f"user_{random.randint(1000, 9999)}",
                description="Sample TikTok video description",
                like_count=random.randint(100, 10000),
                comment_count=random.randint(50, 500),
                share_count=random.randint(10, 1000),
                play_count=random.randint(1000, 100000),
                created_at=datetime.now().isoformat()
            )
            
        except Exception as e:
            raise Exception(f"Failed to get video info: {str(e)}")
    
    def _extract_video_id(self, url: str) -> str:
        """Extract video ID from TikTok URL"""
        import re
        
        # Try different TikTok URL patterns
        patterns = [
            r'/video/(\d+)',
            r'@[\w.]+/video/(\d+)',
            r'vm\.tiktok\.com/(\w+)',
            r'tiktok\.com/.*?/(\d+)'
        ]
        
        for pattern in patterns:
            match = re.search(pattern, url)
            if match:
                return match.group(1)
        
        # Generate mock ID if extraction fails
        return f"video_{random.randint(100000000000000000, 999999999999999999)}"
    
    def _generate_realistic_comments(self, video_id: str) -> List[Dict[str, Any]]:
        """Generate realistic Vietnamese comments for testing"""
        
        # Realistic normal comments
        normal_comments = [
            "Video hay qu√°! C·∫£m ∆°n b·∫°n ƒë√£ chia s·∫ª",
            "√Çm nh·∫°c trong video n√†y hay gh√™!",
            "Haha clip n√†y vui qu√°! üòÇ",
            "C·∫£m ∆°n b·∫°n ƒë√£ l√†m video n√†y",
            "M√¨nh r·∫•t th√≠ch phong c√°ch c·ªßa b·∫°n",
            "Video ch·∫•t l∆∞·ª£ng cao qu√°!",
            "B·∫°n l√†m video r·∫•t chuy√™n nghi·ªáp",
            "N·ªôi dung hay v√† b·ªï √≠ch",
            "C·∫£m ∆°n b·∫°n ƒë√£ chia s·∫ª ki·∫øn th·ª©c",
            "Video n√†y gi√∫p m√¨nh h·ªçc ƒë∆∞·ª£c nhi·ªÅu ƒëi·ªÅu",
            "Qu√° tuy·ªát v·ªùi! üëè",
            "M√¨nh ƒë√£ follow b·∫°n r·ªìi",
            "Ch·ªù video ti·∫øp theo c·ªßa b·∫°n",
            "B·∫°n quay ·ªü ƒë√¢u v·∫≠y? ƒê·∫πp qu√°!",
            "Outfit n√†y ƒë·∫πp gh√™!",
            "Makeup c·ªßa b·∫°n xinh qu√°",
            "B√†i h√°t g√¨ v·∫≠y b·∫°n?",
            "Trend n√†y hot gh√™",
            "M√¨nh c≈©ng mu·ªën th·ª≠ l√†m",
            "B·∫°n d·∫°y m√¨nh ƒë∆∞·ª£c kh√¥ng?"
        ]
        
        # Realistic seeding comments
        seeding_comments = [
            "S·∫£n ph·∫©m n√†y tuy·ªát v·ªùi qu√°! T√¥i ƒë√£ mua v√† r·∫•t h√†i l√≤ng. B·∫°n n√†o c·∫ßn th√¨ inbox shop nh√©! üíï",
            "Shop n√†y uy t√≠n l·∫Øm c√°c b·∫°n ∆°i! T√¥i ƒë√£ mua nhi·ªÅu l·∫ßn r·ªìi, ch·∫•t l∆∞·ª£ng ƒë·∫£m b·∫£o 100%",
            "Link mua ·ªü ƒë√¢u v·∫≠y admin? Inbox em v·ªõi ·∫°! C·∫ßn g·∫•p qu√° ü•∫",
            "S·∫£n ph·∫©m ch·∫•t l∆∞·ª£ng cao, gi√° c·∫£ h·ª£p l√Ω. M·ªçi ng∆∞·ªùi n√™n mua th·ª≠!",
            "Shop b√°n h√†ng uy t√≠n, giao h√†ng nhanh. Recommend cho m·ªçi ng∆∞·ªùi! ‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê",
            "M√¨nh ƒë√£ order r·ªìi, ch·∫•t l∆∞·ª£ng t·ªët l·∫Øm. Ai c·∫ßn th√¨ li√™n h·ªá shop nh√©",
            "Gi√° r·∫ª m√† ch·∫•t l∆∞·ª£ng t·ªët. Link mua ·ªü bio shop nha c√°c b·∫°n!",
            "ƒê√£ test s·∫£n ph·∫©m, hi·ªáu qu·∫£ th·∫≠t s·ª±. B·∫°n n√†o quan t√¢m inbox m√¨nh",
            "Shop n√†y b√°n ƒë√∫ng nh∆∞ qu·∫£ng c√°o, kh√¥ng l·ª´a ƒë·∫£o. Tin t∆∞·ªüng ƒë∆∞·ª£c!",
            "S·∫£n ph·∫©m hot hit n√†y, mua ngay k·∫ªo h·∫øt h√†ng. Link ·ªü d∆∞·ªõi comment",
            "Freeship to√†n qu·ªëc, COD t·∫≠n n∆°i. M·ªçi ng∆∞·ªùi y√™n t√¢m order nh√©!",
            "Khuy·∫øn m√£i 50% h√¥m nay th√¥i. Nhanh tay inbox admin!",
            "M√¨nh b√°n s·∫£n ph·∫©m n√†y, ai c·∫ßn li√™n h·ªá Zalo: 0123456789",
            "Shop cam k·∫øt ho√†n ti·ªÅn 100% n·∫øu kh√¥ng h√†i l√≤ng",
            "ƒê·∫∑t h√†ng ngay h√¥m nay, t·∫∑ng k√®m qu√† xinh x·∫Øn",
            "Sale s·ªëc ch·ªâ c√≤n 99k, s·ªë l∆∞·ª£ng c√≥ h·∫°n!",
            "B·∫°n n√†o ·ªü H√† N·ªôi m√¨nh giao t·∫≠n n∆°i lu√¥n",
            "Link order: bit.ly/shopuytin - Mua ngay!",
            "Admin check inbox em v·ªõi, em mu·ªën mua g·∫•p",
            "S·∫£n ph·∫©m n√†y m√¨nh ƒëang d√πng, hi·ªáu qu·∫£ l·∫Øm. B√°n gi√° t·ªët!"
        ]
        
        comments = []
        num_comments = random.randint(30, 150)
        
        for i in range(num_comments):
            # 25% chance of seeding comment (realistic ratio)
            is_seeding = random.random() < 0.25
            
            if is_seeding:
                comment_text = random.choice(seeding_comments)
                # Seeding comments tend to have more likes
                like_count = random.randint(5, 300)
            else:
                comment_text = random.choice(normal_comments)
                like_count = random.randint(0, 100)
            
            # Generate realistic timestamp (last 7 days)
            days_ago = random.randint(0, 7)
            hours_ago = random.randint(0, 23)
            timestamp = datetime.now() - timedelta(days=days_ago, hours=hours_ago)
            
            comment = {
                "comment_id": f"comment_{video_id}_{i}",
                "comment_text": comment_text,
                "like_count": like_count,
                "timestamp": timestamp.isoformat(),
                "user_id": f"user_{random.randint(10000, 99999)}",
                "video_id": video_id
            }
            
            comments.append(comment)
        
        return comments
    
    async def close(self):
        """Close HTTP session"""
        await self.session.aclose()